---
import type { TOCSection } from "@/lib/post-manager"
import { PostManager } from "@/lib/post-manager"
import { getHeadingMargin } from "@/lib/toc-utils"
import { cn } from "@/lib/utils"
import { ScrollArea } from "@/components/ui/scroll-area"

type Props = {
  sections: TOCSection[]
  currentPostId: string
}

const { sections, currentPostId } = Astro.props

const blogManager = PostManager.getInstance()
const isCurrentSubpost = blogManager.isSubpost(currentPostId)
const parentId = isCurrentSubpost ? blogManager.getParentId(currentPostId) : currentPostId
---

{
  sections.length > 0 && (
    <div
      id="toc-sidebar-container"
      class="sticky top-20 col-start-1 row-span-1 mr-8 ml-auto hidden h-[calc(100vh-5rem)] max-w-md xl:block"
    >
      <ScrollArea
        client:load
        className="flex max-h-[calc(100vh-8rem)] flex-col overflow-y-auto"
        type="hover"
        data-toc-scroll-area
      >
        <div class="flex flex-col gap-2 px-4">
          <span class="text-lg font-medium">Table of Contents</span>
          {sections.map((section, index) => {
            const isFirstSubpost =
              section.type === "subpost" && (index === 0 || sections[index - 1].type === "parent")

            return (
              <>
                {isFirstSubpost && (
                  <div class="mt-2 flex items-center gap-2">
                    <div class="bg-border h-px flex-1" />
                    <span class="text-muted-foreground text-xs font-medium">Subposts</span>
                    <div class="bg-border h-px flex-1" />
                  </div>
                )}

                {section.type === "parent" ? (
                  <ul class="flex list-none flex-col gap-y-2">
                    {section.headings.map((heading) => (
                      <li
                        class={cn(
                          "text-sm",
                          getHeadingMargin(heading.depth),
                          isCurrentSubpost ? "text-foreground/40" : "text-foreground/60"
                        )}
                      >
                        <a
                          href={
                            isCurrentSubpost
                              ? `/blog/${parentId}#${heading.slug}`
                              : `#${heading.slug}`
                          }
                          class="marker:text-foreground/30 list-none underline decoration-transparent underline-offset-[3px] transition-colors duration-200 hover:decoration-inherit"
                          data-heading-link={heading.slug}
                        >
                          {heading.text}
                        </a>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <div
                    class={cn(
                      "border p-2",
                      section.subpostId === currentPostId ? "bg-muted/50" : ""
                    )}
                  >
                    <ul class="flex list-none flex-col gap-y-2">
                      <li
                        class={cn(
                          "text-xs font-medium",
                          section.subpostId === currentPostId
                            ? "text-foreground"
                            : "text-foreground/60"
                        )}
                      >
                        <a
                          href={
                            section.subpostId === currentPostId ? "#" : `/blog/${section.subpostId}`
                          }
                          class="marker:text-foreground/30 list-none underline decoration-transparent underline-offset-[3px] transition-colors duration-200 hover:decoration-inherit"
                          data-heading-link={
                            section.subpostId === currentPostId ? "top" : `${section.subpostId}-top`
                          }
                        >
                          {section.title}
                        </a>
                      </li>
                      {section.headings.map((heading) => (
                        <li
                          class={cn(
                            "text-xs",
                            getHeadingMargin(heading.depth),
                            section.subpostId === currentPostId
                              ? "text-foreground/60"
                              : "text-foreground/30"
                          )}
                        >
                          <a
                            href={
                              section.subpostId === currentPostId
                                ? `#${heading.slug}`
                                : `/blog/${section.subpostId}#${heading.slug}`
                            }
                            class="marker:text-foreground/30 hover:text-foreground/60 list-none underline decoration-transparent underline-offset-[3px] transition-colors duration-200 hover:decoration-inherit"
                            data-heading-link={
                              section.subpostId === currentPostId
                                ? heading.slug
                                : `${section.subpostId}-${heading.slug}`
                            }
                          >
                            {heading.text}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </>
            )
          })}
        </div>
      </ScrollArea>
    </div>
  )
}

<script>
  import { BaseTOCController } from "@/lib/toc-scroll"

  class TOCSidebarController extends BaseTOCController {
    getContainerSelector() {
      return "#toc-sidebar-container"
    }

    getScrollAreaSelector() {
      return "[data-radix-scroll-area-viewport]"
    }
  }

    getContainerAttribute() {
      return "data-toc-scroll-area"
    }

    getLinkSelector() {
      return "#toc-sidebar-container [data-heading-link]"
    }

    getMaskClasses() {
      return { top: "mask-t-from-90%", bottom: "mask-b-from-90%" }
    }
  }

  const controller = new TOCSidebarController()

  document.addEventListener("astro:page-load", () => controller.init())
  document.addEventListener("astro:after-swap", () => {
    controller.cleanup()
    controller.init()
  })
  document.addEventListener("astro:before-swap", () => controller.cleanup())
</script>
