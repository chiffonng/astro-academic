---
import type { SubpostContext } from "@/lib/post-manager"
import Badge from "@/components/base/Badge.astro"
import Icon from "@/components/base/Icon.astro"
import PostItem from "@/components/blog/PostItem.astro"
import SubpostItem from "@/components/blog/SubpostItem.astro"
import { ScrollArea } from "@/components/ui/scroll-area"

interface Props {
  subpostContext: SubpostContext
}

const { subpostContext } = Astro.props
const { currentPost, parentPost, subposts, metadata, isCurrentSubpost } = subpostContext

const activePost = parentPost || currentPost
const isActivePost = activePost?.id === currentPost.id

const activePostMetadata = metadata.get(activePost.id)
const activePostWordCount = activePostMetadata?.wordCount || 0
const activePostCombinedWordCount = activePostMetadata?.combinedWordCount

const subpostsWithWordCount = subposts.map((subpost) => ({
  ...subpost,
  wordCount: metadata.get(subpost.id)?.wordCount || 0
}))

const currentSubpostDetails = isCurrentSubpost
  ? subpostsWithWordCount.find((subpost) => subpost.id === currentPost.id)
  : null

const currentTitle = currentSubpostDetails
  ? currentSubpostDetails.data.title
  : activePost?.data.title
const subpostCount = subposts.length
---

{
  activePost && subpostCount > 0 && (
    <nav id="mobile-subposts-container" class="w-full xl:hidden" aria-label="Subposts navigation">
      <details class="group" role="button" aria-expanded="false">
        <summary class="focus-visible:ring-ring flex w-full cursor-pointer items-center justify-between focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none">
          <header class="mx-auto flex w-full max-w-3xl items-center justify-between px-4 py-3">
            <div class="flex items-center gap-3">
              <div
                class="flex size-5 flex-shrink-0 items-center justify-center"
                role="img"
                aria-label="Post type indicator"
              >
                <Icon
                  name={
                    currentSubpostDetails ? "post-active" : isActivePost ? "post-active" : "post"
                  }
                  class="size-4"
                />
              </div>
              <div class="flex items-center gap-2">
                <span class="text-foreground truncate text-sm leading-tight font-medium">
                  {currentTitle}
                </span>
                {!currentSubpostDetails && (
                  <Badge variant="info" class="text-xs">
                    {subpostCount}&nbsp;{subpostCount === 1 ? "subpost" : "subposts"}
                  </Badge>
                )}
              </div>
            </div>
            <Icon
              name="chevron-down"
              class="text-muted-foreground size-4 flex-shrink-0 transition-transform duration-200 group-open:rotate-180"
            />
          </header>
        </summary>

        <ScrollArea
          client:load
          className="mx-auto max-w-3xl border-t border-border/50"
          data-subposts-header-scroll
        >
          <div class="max-h-[35vh]">
            <ul class="flex list-none flex-col gap-y-1 px-3 py-2" role="list">
              {activePost && (
                <li role="listitem">
                  <PostItem
                    post={activePost}
                    isActive={isActivePost}
                    wordCount={activePostWordCount}
                    combinedWordCount={activePostCombinedWordCount || undefined}
                    variant="header"
                    isParentPost={!!parentPost}
                  />
                </li>
              )}

              {subpostsWithWordCount.length > 0 && (
                <li role="listitem">
                  <div class="ml-4 space-y-1" role="group" aria-labelledby="subposts-heading">
                    <h4 id="subposts-heading" class="sr-only">
                      Subposts
                    </h4>
                    {subpostsWithWordCount.map((subpost) => (
                      <SubpostItem
                        subpost={subpost}
                        isActive={currentPost.id === subpost.id}
                        variant="header"
                      />
                    ))}
                  </div>
                </li>
              )}
            </ul>
          </div>
        </ScrollArea>
      </details>
    </nav>
  )
}

<script>
  import { BaseScrollController } from "@/lib/subposts-scroll"

  class SubpostsHeaderController extends BaseScrollController {
    private detailsElement: HTMLDetailsElement | null = null

    getContainerSelector() {
      return "#mobile-subposts-container"
    }

    getScrollAreaSelector() {
      return "[data-radix-scroll-area-viewport]"
    }

    getContainerAttribute() {
      return "data-subposts-header-scroll"
    }

    getActiveItemSelector() {
      return ".mobile-subposts-active-item"
    }

    getMaskClasses() {
      return { top: "mask-t-from-80%", bottom: "mask-b-from-80%" }
    }

    protected setupCustomBehavior() {
      const container = document.querySelector(this.getContainerSelector())
      if (!container) return

      this.detailsElement = container.querySelector("details")
      const links = container.querySelectorAll(".mobile-subposts-link")

      if (this.detailsElement) {
        this.detailsElement.addEventListener("toggle", () => {
          if (this.detailsElement?.open) {
            requestAnimationFrame(() => {
              this.scrollToActive.scroll(this.getActiveItemSelector())
              setTimeout(() => this.scrollMask.update(this.getMaskClasses()), 100)
            })
          }
        })
      }

      links.forEach((link) => {
        link.addEventListener("click", () => {
          if (this.detailsElement) this.detailsElement.open = false
        })
      })
    }
  }

  const controller = new SubpostsHeaderController()

  document.addEventListener("astro:page-load", () => controller.init())
  document.addEventListener("astro:after-swap", () => {
    controller.cleanup()
    controller.init()
  })
  document.addEventListener("astro:before-swap", () => controller.cleanup())
</script>
