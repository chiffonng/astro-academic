---
import { type SubpostContext } from "@/lib/post-manager"
import Badge from "@/components/base/Badge.astro"
import Icon from "@/components/base/Icon.astro"
import { ScrollArea } from "@/components/ui/scroll-area"

interface Props {
  subpostContext: SubpostContext
}

const { subpostContext } = Astro.props
const { currentPost, parentPost, subposts, metadata, isCurrentSubpost } = subpostContext

const activePost = parentPost || currentPost
const isActivePost = activePost?.id === currentPost.id

const activePostMetadata = metadata.get(activePost.id)
const activePostReadingTime = activePostMetadata?.readingTime
const activePostCombinedReadingTime = activePostMetadata?.combinedReadingTime

const subpostsWithReadingTime = subposts.map((subpost) => ({
  ...subpost,
  readingTime: metadata.get(subpost.id)?.readingTime || "0 min"
}))

const currentSubpostDetails = isCurrentSubpost
  ? subpostsWithReadingTime.find((subpost) => subpost.id === currentPost.id)
  : null
---

{
  activePost && subposts.length > 0 && (
    <div id="mobile-subposts-container" class="w-full xl:hidden">
      <details class="group">
        <summary class="flex w-full cursor-pointer items-center justify-between">
          <div class="mx-auto flex w-full max-w-3xl items-center justify-between px-4 py-3">
            <div class="flex items-center gap-2">
              <div class="relative flex size-4 flex-shrink-0 items-center justify-center">
                <Icon
                  name={currentSubpostDetails ? "subpost" : isActivePost ? "post-active" : "post"}
                  class="size-4"
                  aria-hidden="true"
                />
              </div>
              <span class="text-muted-foreground truncate text-sm leading-4">
                {currentSubpostDetails ? currentSubpostDetails.data.title : activePost?.data.title}
              </span>
              {subposts.length > 0 && (
                <Badge variant="info" class="ml-2 text-xs">
                  <Icon name="subposts" class="size-3" />
                  {subposts.length} subpost(s)
                </Badge>
              )}
            </div>
            <Icon
              name="mingcute:down-line"
              class="text-muted-foreground size-4 flex-shrink-0 transition-transform duration-200 group-open:rotate-180"
            />
          </div>
        </summary>

        <ScrollArea client:load className="mx-auto max-w-3xl" data-subposts-header-scroll>
          <div class="max-h-[30vh]">
            <ul class="flex list-none flex-col gap-y-1 px-4 pb-4">
              {activePost && (
                <li>
                  {isActivePost ? (
                    <div class="text-foreground bg-muted mobile-subposts-active-item flex items-center gap-2 rounded-md px-2 py-1.5 text-sm font-medium">
                      <Icon name="post-active" class="size-4 flex-shrink-0" aria-hidden="true" />
                      <div class="flex flex-col">
                        <span class="line-clamp-2">{activePost.data.title}</span>
                        {activePostReadingTime && (
                          <span class="text-muted-foreground/80 text-xs">
                            {activePostReadingTime}
                            {activePostCombinedReadingTime &&
                              activePostCombinedReadingTime !== activePostReadingTime && (
                                <span> ({activePostCombinedReadingTime} total)</span>
                              )}
                          </span>
                        )}
                      </div>
                    </div>
                  ) : (
                    <a
                      href={`/blog/${activePost.id}`}
                      class="mobile-subposts-link hover:text-foreground text-muted-foreground hover:bg-muted/50 flex items-center gap-2 rounded-md px-2 py-1.5 text-sm transition-colors"
                    >
                      <Icon name="post-active" class="size-4 flex-shrink-0" aria-hidden="true" />
                      <div class="flex flex-col">
                        <span class="line-clamp-2">{activePost.data.title}</span>
                        {activePostReadingTime && (
                          <span class="text-muted-foreground/80 hover:text-foreground/80 text-xs">
                            {activePostReadingTime}
                            {activePostCombinedReadingTime &&
                              activePostCombinedReadingTime !== activePostReadingTime && (
                                <span> ({activePostCombinedReadingTime} total)</span>
                              )}
                          </span>
                        )}
                      </div>
                    </a>
                  )}
                </li>
              )}

              {subpostsWithReadingTime.length > 0 && (
                <div class="ml-4 space-y-1">
                  {subpostsWithReadingTime.map((subpost) =>
                    currentPost.id === subpost.id ? (
                      <div class="text-foreground bg-muted mobile-subposts-active-item flex items-center gap-2 rounded-md px-2 py-1.5 text-sm font-medium">
                        <Icon name="subpost" class="size-4 flex-shrink-0" aria-hidden="true" />
                        <div class="flex flex-col">
                          <span class="line-clamp-2">{subpost.data.title}</span>
                          <span class="text-muted-foreground/80 text-xs">
                            {subpost.readingTime}
                          </span>
                        </div>
                      </div>
                    ) : (
                      <a
                        href={`/blog/${subpost.id}`}
                        class="mobile-subposts-link hover:text-foreground text-muted-foreground hover:bg-muted/50 flex items-center gap-2 rounded-md px-2 py-1.5 text-sm transition-colors"
                      >
                        <Icon name="subpost" class="size-4 flex-shrink-0" aria-hidden="true" />
                        <div class="flex flex-col">
                          <span class="line-clamp-2">{subpost.data.title}</span>
                          <span class="text-muted-foreground/80 hover:text-foreground/80 text-xs">
                            {subpost.readingTime}
                          </span>
                        </div>
                      </a>
                    )
                  )}
                </div>
              )}
            </ul>
          </div>
        </ScrollArea>
      </details>
    </div>
  )
}

<script>
  class SubpostsState {
    scrollArea: HTMLElement | null = null
    detailsElement: HTMLDetailsElement | null = null
    headerScrollArea: HTMLElement | null = null

    reset() {
      this.scrollArea = null
      this.detailsElement = null
      this.headerScrollArea = null
    }
  }

  const state = new SubpostsState()

  class SubpostsHeaderScrollMask {
    static update() {
      if (!state.scrollArea || !state.headerScrollArea) return

      const { scrollTop, scrollHeight, clientHeight } = state.scrollArea
      const threshold = 5
      const isAtTop = scrollTop <= threshold
      const isAtBottom = scrollTop >= scrollHeight - clientHeight - threshold

      state.headerScrollArea.classList.toggle("mask-t-from-80%", !isAtTop)
      state.headerScrollArea.classList.toggle("mask-b-from-80%", !isAtBottom)
    }
  }

  class SubpostsScroll {
    static toActive() {
      if (!state.scrollArea) return

      const activeItem = state.scrollArea.querySelector(".mobile-subposts-active-item")
      if (!activeItem) return

      const { top: areaTop, height: areaHeight } = state.scrollArea.getBoundingClientRect()
      const { top: itemTop, height: itemHeight } = activeItem.getBoundingClientRect()

      const currentItemTop = itemTop - areaTop + state.scrollArea.scrollTop
      const targetScroll = Math.max(
        0,
        Math.min(
          currentItemTop - (areaHeight - itemHeight) / 2,
          state.scrollArea.scrollHeight - state.scrollArea.clientHeight
        )
      )

      state.scrollArea.scrollTop = targetScroll
    }

    static setupInteraction() {
      const container = document.getElementById("mobile-subposts-container")
      if (!container) return

      state.scrollArea = container.querySelector("[data-radix-scroll-area-viewport]")
      state.detailsElement = container.querySelector("details")
      state.headerScrollArea = container.querySelector("[data-subposts-header-scroll]")
      const links = container.querySelectorAll(".mobile-subposts-link")

      if (state.scrollArea) {
        state.scrollArea.addEventListener("scroll", SubpostsHeaderScrollMask.update, {
          passive: true
        })
      }

      if (state.detailsElement) {
        state.detailsElement.addEventListener("toggle", () => {
          if (state.detailsElement?.open) {
            requestAnimationFrame(() => {
              SubpostsScroll.toActive()
              setTimeout(SubpostsHeaderScrollMask.update, 100)
            })
          }
        })
      }

      links.forEach((link) => {
        link.addEventListener("click", () => {
          if (state.detailsElement) state.detailsElement.open = false
        })
      })
    }
  }

  class SubpostsController {
    static init() {
      state.reset()
      SubpostsScroll.setupInteraction()
    }

    static cleanup() {
      if (state.scrollArea) {
        state.scrollArea.removeEventListener("scroll", SubpostsHeaderScrollMask.update)
      }
      state.reset()
    }
  }

  document.addEventListener("astro:page-load", () => SubpostsController.init())
  document.addEventListener("astro:after-swap", () => {
    SubpostsController.cleanup()
    SubpostsController.init()
  })
  document.addEventListener("astro:before-swap", () => SubpostsController.cleanup())
</script>
