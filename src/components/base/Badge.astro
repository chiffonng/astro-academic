---
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

import Link from "./Link.astro"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-background [a&]:hover:text-foreground",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/80 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/80",
        outline: "text-foreground [a&]:hover:bg-primary [a&]:hover:text-primary-foreground",
        muted:
          "border-transparent bg-muted text-muted-foreground [a&]:hover:bg-secondary [a&]:hover:text-secondary-foreground"
      }
    },
    defaultVariants: {
      variant: "default"
    }
  }
)

export interface Props extends astroHTML.JSX.HTMLAttributes {
  variant?: VariantProps<typeof badgeVariants>["variant"]
  href?: string
}

const { variant = "default", class: className, href, ...rest } = Astro.props
---

{
  href ? (
    <Link href={href} data-slot="badge" class={cn(badgeVariants({ variant }), className)} {...rest}>
      <slot />
    </Link>
  ) : (
    <span data-slot="badge" class={cn(badgeVariants({ variant }), className)} {...rest}>
      <slot />
    </span>
  )
}
